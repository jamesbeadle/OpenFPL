// Version: 1.0.0
type AccountIdentifier__4 = {hash : [Nat8]};
type Amount = {e8s : Nat64};
type By =
  {
    #Memo : Nat64;
    #MemoAndController : ClaimOrRefreshNeuronFromAccount;
    #NeuronIdOrSubaccount
  };
type CalendarMonth = Nat8;
type CanisterId = Text;
type CanisterTopup =
  {canisterId : CanisterId; cyclesAmount : Nat; topupTime : Int};
type ChangeAutoStakeMaturity =
  {requested_setting_for_auto_stake_maturity : Bool};
type ClaimOrRefresh = {by : ?By};
type ClaimOrRefreshNeuronFromAccount =
  {controller : ?Principal; memo : Nat64};
type Club =
  {
    abbreviatedName : Text;
    friendlyName : Text;
    id : ClubId;
    name : Text;
    primaryColourHex : Text;
    secondaryColourHex : Text;
    shirtType : ShirtType;
    thirdColourHex : Text
  };
type ClubId = Nat16;
type Command =
  {
    #ClaimOrRefresh : ClaimOrRefresh;
    #Configure : Configure;
    #Disburse : Disburse;
    #Follow : Follow;
    #Spawn : Spawn;
    #StakeMaturity : StakeMaturityResponse
  };
type Configure = {operation : ?Operation__1};
type CountryId = Nat16;
type DataCache = {category : Text; hash : Text};
type Disburse = {amount : ?Amount; to_account : ?AccountIdentifier__4};
type EventLogEntry =
  {
    eventDetail : Text;
    eventId : Nat;
    eventTime : Int;
    eventTitle : Text;
    eventType : EventLogEntryType
  };
type EventLogEntryType =
  {#CanisterTopup; #ManagerCanisterCreated; #SystemCheck; #UnexpectedError};
type Fixture =
  {
    awayClubId : ClubId;
    awayGoals : Nat8;
    events : List<PlayerEventData>;
    gameweek : GameweekNumber;
    highestScoringPlayerId : PlayerId;
    homeClubId : ClubId;
    homeGoals : Nat8;
    id : FixtureId;
    kickOff : Int;
    seasonId : SeasonId;
    status : FixtureStatusType
  };
type FixtureId = Nat32;
type FixtureStatusType = {#Active; #Complete; #Finalised; #Unplayed};
type Follow = {followees : [NeuronId]; topic : Int32};
type GameweekNumber = Nat8;
type HighScoreRecord =
  {createDate : Int; points : Int16; recordType : RecordType};
type IncreaseDissolveDelay = {additional_dissolve_delay_seconds : Nat32};
type InjuryHistory =
  {description : Text; expectedEndDate : Int; injuryStartDate : Int};
type InviteStatus = {#Accepted; #Rejected; #Sent};
type LeaderboardEntry =
  {
    points : Int16;
    position : Nat;
    positionText : Text;
    principalId : Text;
    username : Text
  };
type LeagueInvite =
  {
    from : PrincipalId;
    inviteStatus : InviteStatus;
    leagueCanisterId : CanisterId;
    sent : Int;
    to : PrincipalId
  };
type List<T> = ?(T, List<T>);
type MonthlyLeaderboardsCanister =
  {canisterId : Text; month : CalendarMonth; seasonId : SeasonId};
type MonthlyRewards =
  {month : CalendarMonth; rewards : List<RewardEntry>; seasonId : SeasonId};
type NeuronId = {id : Nat64};
type Operation__1 =
  {
    #ChangeAutoStakeMaturity : ChangeAutoStakeMaturity;
    #IncreaseDissolveDelay : IncreaseDissolveDelay;
    #SetDissolveTimestamp : SetDissolveTimestamp;
    #StartDissolving;
    #StopDissolving
  };
type Player =
  {
    clubId : ClubId;
    currentLoanEndDate : Int;
    dateOfBirth : Int;
    firstName : Text;
    id : PlayerId;
    injuryHistory : List<InjuryHistory>;
    lastName : Text;
    latestInjuryEndDate : Int;
    nationality : CountryId;
    parentClubId : Nat16;
    position : PlayerPosition;
    retirementDate : Int;
    seasons : List<PlayerSeason>;
    shirtNumber : Nat8;
    status : PlayerStatus;
    transferHistory : List<TransferHistory>;
    valueHistory : List<ValueHistory>;
    valueQuarterMillions : Nat16
  };
type PlayerEventData =
  {
    clubId : ClubId;
    eventEndMinute : Nat8;
    eventStartMinute : Nat8;
    eventType : PlayerEventType;
    fixtureId : FixtureId;
    playerId : Nat16
  };
type PlayerEventType =
  {
    #Appearance;
    #CleanSheet;
    #Goal;
    #GoalAssisted;
    #GoalConceded;
    #HighestScoringPlayer;
    #KeeperSave;
    #OwnGoal;
    #PenaltyMissed;
    #PenaltySaved;
    #RedCard;
    #YellowCard
  };
type PlayerGameweek =
  {events : List<PlayerEventData>; number : Nat8; points : Int16};
type PlayerId = Nat16;
type PlayerPosition = {#Defender; #Forward; #Goalkeeper; #Midfielder};
type PlayerSeason = {gameweeks : List<PlayerGameweek>; id : Nat16};
type PlayerStatus = {#Active; #Former; #OnLoan; #Retired};
type PrincipalId = Text;
type RecordType = {#MonthlyHighScore; #SeasonHighScore; #WeeklyHighScore};
type RewardEntry =
  {
    amount : Nat64;
    position : Nat;
    principalId : Text;
    rewardType : RewardType
  };
type RewardPool =
  {
    allTimeMonthlyHighScorePool : Nat64;
    allTimeSeasonHighScorePool : Nat64;
    allTimeWeeklyHighScorePool : Nat64;
    highestScoringMatchPlayerPool : Nat64;
    monthlyLeaderboardPool : Nat64;
    mostValuableTeamPool : Nat64;
    seasonId : SeasonId;
    seasonLeaderboardPool : Nat64;
    weeklyLeaderboardPool : Nat64
  };
type RewardType =
  {
    #HighestScoringPlayer;
    #MonthlyATHScore;
    #MonthlyLeaderboard;
    #MostValuableTeam;
    #SeasonATHScore;
    #SeasonLeaderboard;
    #WeeklyATHScore;
    #WeeklyLeaderboard
  };
type RewardsList = {rewards : List<RewardEntry>};
type Season =
  {
    fixtures : List<Fixture>;
    id : Nat16;
    name : Text;
    postponedFixtures : List<Fixture>;
    year : Nat16
  };
type SeasonId = Nat16;
type SeasonLeaderboardCanister = {canisterId : Text; seasonId : SeasonId};
type SeasonRewards = {rewards : List<RewardEntry>; seasonId : SeasonId};
type SetDissolveTimestamp = {dissolve_timestamp_seconds : Nat64};
type ShirtType = {#Filled; #Striped};
type Spawn =
  {new_controller : ?Principal; nonce : ?Nat64; percentage_to_spawn : ?Nat32};
type StakeMaturityResponse =
  {maturity_e8s : Nat64; stake_maturity_e8s : Nat64};
type TeamValueLeaderboard =
  {entries : List<LeaderboardEntry>; seasonId : SeasonId; totalEntries : Nat};
type TimerInfo = {callbackName : Text; id : Int; triggerTime : Int};
type TokenId = Nat16;
type TokenInfo =
  {
    canisterId : CanisterId;
    fee : Nat;
    id : TokenId;
    ticker : Text;
    tokenImageURL : Text
  };
type TransferHistory =
  {
    fromClub : ClubId;
    loanEndDate : Int;
    toClub : ClubId;
    transferDate : Int;
    transferGameweek : GameweekNumber;
    transferSeason : SeasonId
  };
type ValueHistory =
  {gameweek : Nat8; newValue : Nat16; oldValue : Nat16; seasonId : Nat16};
type WeeklyLeaderboardCanister =
  {canisterId : Text; gameweek : GameweekNumber; seasonId : SeasonId};
type WeeklyRewards =
  {
    gameweek : GameweekNumber;
    rewards : List<RewardEntry>;
    seasonId : SeasonId
  };
actor {
  stable var neuronCommand : ?Command;
  stable var neuronCreated : Bool;
  stable var stable_active_manager_canister_id : Text;
  stable var stable_clubs : [Club];
  stable var stable_data_cache_hashes : [DataCache];
  stable var stable_event_logs : [EventLogEntry];
  stable var stable_highest_scoring_player_rewards : [RewardsList];
  stable var stable_manager_canister_ids : [(PrincipalId, CanisterId)];
  stable var stable_manager_usernames : [(PrincipalId, Text)];
  stable var stable_monthly_ath_prize_pool : Nat64;
  stable var stable_monthly_ath_scores : [HighScoreRecord];
  stable var stable_monthly_leaderboards_canisters :
    [MonthlyLeaderboardsCanister];
  stable var stable_monthly_rewards : [MonthlyRewards];
  stable var stable_most_valuable_team_rewards : [RewardsList];
  stable var stable_next_club_id : Nat16;
  stable var stable_next_fixture_id : Nat32;
  stable var stable_next_player_id : Nat16;
  stable var stable_next_season_id : Nat16;
  stable var stable_next_system_event_id : Nat;
  stable var stable_next_token_id : Nat16;
  stable var stable_players : [Player];
  stable var stable_private_league_canister_ids : [CanisterId];
  stable var stable_private_league_name_index : [(CanisterId, Text)];
  stable var stable_private_league_unaccepted_invites :
    [(PrincipalId, LeagueInvite)];
  stable var stable_relegated_clubs : [Club];
  stable var stable_reward_pools : [(SeasonId, RewardPool)];
  stable var stable_season_ath_prize_pool : Nat64;
  stable var stable_season_ath_scores : [HighScoreRecord];
  stable var stable_season_leaderboard_canisters :
    [SeasonLeaderboardCanister];
  stable var stable_season_rewards : [SeasonRewards];
  stable var stable_seasons : [Season];
  stable var stable_system_state :
    {
      calculationGameweek : GameweekNumber;
      calculationMonth : CalendarMonth;
      calculationSeasonId : SeasonId;
      onHold : Bool;
      pickTeamGameweek : GameweekNumber;
      pickTeamSeasonId : SeasonId;
      seasonActive : Bool;
      transferWindowActive : Bool;
      version : Text
    };
  stable var stable_team_value_leaderboards :
    [(SeasonId, TeamValueLeaderboard)];
  stable var stable_timers : [TimerInfo];
  stable var stable_token_list : [TokenInfo];
  stable var stable_topups : [CanisterTopup];
  stable var stable_total_managers : Nat;
  stable var stable_unique_manager_canister_ids : [CanisterId];
  stable var stable_weekly_ath_prize_pool : Nat64;
  stable var stable_weekly_ath_scores : [HighScoreRecord];
  stable var stable_weekly_leaderboard_canisters :
    [WeeklyLeaderboardCanister];
  stable var stable_weekly_rewards : [WeeklyRewards]
};
