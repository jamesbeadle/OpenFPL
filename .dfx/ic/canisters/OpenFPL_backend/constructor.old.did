type WeeklyLeaderboardDTO = 
 record {
   entries: vec LeaderboardEntry;
   gameweek: GameweekNumber;
   seasonId: SeasonId;
   totalEntries: nat;
 };
type ValueHistory = 
 record {
   gameweek: nat8;
   newValue: nat16;
   oldValue: nat16;
   seasonId: nat16;
 };
type UsernameFilterDTO = record {username: text;};
type UpdateUsernameDTO = record {username: text;};
type UpdateTeamSelectionDTO = 
 record {
   braceBonusGameweek: GameweekNumber;
   captainFantasticGameweek: GameweekNumber;
   captainFantasticPlayerId: PlayerId;
   captainId: PlayerId;
   goalGetterGameweek: GameweekNumber;
   goalGetterPlayerId: PlayerId;
   hatTrickHeroGameweek: GameweekNumber;
   noEntryGameweek: GameweekNumber;
   noEntryPlayerId: PlayerId;
   oneNationCountryId: CountryId;
   oneNationGameweek: GameweekNumber;
   passMasterGameweek: GameweekNumber;
   passMasterPlayerId: PlayerId;
   playerIds: vec PlayerId;
   prospectsGameweek: GameweekNumber;
   safeHandsGameweek: GameweekNumber;
   safeHandsPlayerId: PlayerId;
   teamBoostClubId: ClubId;
   teamBoostGameweek: GameweekNumber;
   transferWindowGameweek: GameweekNumber;
   username: text;
 };
type UpdateSystemStatusDTO = 
 record {
   calculationGameweek: GameweekNumber;
   calculationMonth: CalendarMonth;
   calculationSeasonId: SeasonId;
   onHold: bool;
   pickTeamGameweek: GameweekNumber;
   pickTeamMonth: CalendarMonth;
   pickTeamSeasonId: SeasonId;
   seasonActive: bool;
   transferWindowActive: bool;
   version: text;
 };
type UpdateRewardPoolsDTO = 
 record {
   allTimeMonthlyHighScorePool: nat64;
   allTimeSeasonHighScorePool: nat64;
   allTimeWeeklyHighScorePool: nat64;
   highestScoringMatchPlayerPool: nat64;
   monthlyLeaderboardPool: nat64;
   mostValuableTeamPool: nat64;
   seasonId: SeasonId;
   seasonLeaderboardPool: nat64;
   weeklyLeaderboardPool: nat64;
 };
type UpdateProfilePictureDTO = 
 record {
   extension: text;
   profilePicture: blob;
 };
type UpdatePlayerDTO = 
 record {
   dateOfBirth: int;
   firstName: text;
   lastName: text;
   nationality: CountryId;
   playerId: PlayerId;
   position: PlayerPosition;
   shirtNumber: nat8;
 };
type UpdateFavouriteClubDTO = record {favouriteClubId: ClubId;};
type UpdateClubDTO = 
 record {
   abbreviatedName: text;
   clubId: ClubId;
   friendlyName: text;
   name: text;
   primaryColourHex: text;
   secondaryColourHex: text;
   shirtType: ShirtType;
   thirdColourHex: text;
 };
type UnretirePlayerDTO = record {playerId: PlayerId;};
type TransferPlayerDTO = 
 record {
   clubId: ClubId;
   gameweek: GameweekNumber;
   newClubId: ClubId;
   newLeagueId: FootballLeagueId;
   newShirtNumber: nat8;
   playerId: PlayerId;
   seasonId: SeasonId;
 };
type TopupDTO = 
 record {
   canisterId: text;
   toppedUpOn: int;
   topupAmount: nat;
 };
type SystemStateDTO = 
 record {
   calculationGameweek: GameweekNumber;
   calculationMonth: CalendarMonth;
   calculationSeasonId: SeasonId;
   onHold: bool;
   pickTeamGameweek: GameweekNumber;
   pickTeamSeasonId: SeasonId;
   seasonActive: bool;
   transferWindowActive: bool;
   version: text;
 };
type SubmitFixtureDataDTO = 
 record {
   fixtureId: FixtureId;
   gameweek: GameweekNumber;
   month: CalendarMonth;
   playerEventData: vec PlayerEventData;
 };
type ShirtType = 
 variant {
   Filled;
   Striped;
 };
type SetPlayerInjuryDTO = 
 record {
   description: text;
   expectedEndDate: int;
   playerId: PlayerId;
 };
type SeasonLeaderboardDTO = 
 record {
   entries: vec LeaderboardEntry;
   seasonId: SeasonId;
   totalEntries: nat;
 };
type SeasonId = nat16;
type SeasonDTO = 
 record {
   id: SeasonId;
   name: text;
   year: nat16;
 };
type RustResult = 
 variant {
   Err: text;
   Ok: text;
 };
type RewardPool = 
 record {
   allTimeMonthlyHighScorePool: nat64;
   allTimeSeasonHighScorePool: nat64;
   allTimeWeeklyHighScorePool: nat64;
   highestScoringMatchPlayerPool: nat64;
   monthlyLeaderboardPool: nat64;
   mostValuableTeamPool: nat64;
   seasonId: SeasonId;
   seasonLeaderboardPool: nat64;
   weeklyLeaderboardPool: nat64;
 };
type RevaluePlayerUpDTO = 
 record {
   gameweek: GameweekNumber;
   playerId: PlayerId;
   seasonId: SeasonId;
 };
type RevaluePlayerDownDTO = 
 record {
   gameweek: GameweekNumber;
   playerId: PlayerId;
   seasonId: SeasonId;
 };
type RetirePlayerDTO = 
 record {
   playerId: PlayerId;
   retirementDate: int;
 };
type Result_9 = 
 variant {
   err: Error;
   ok: GetRewardPoolDTO;
 };
type Result_8 = 
 variant {
   err: Error;
   ok: SeasonLeaderboardDTO;
 };
type Result_7 = 
 variant {
   err: Error;
   ok: vec SeasonDTO;
 };
type Result_6 = 
 variant {
   err: Error;
   ok: SystemStateDTO;
 };
type Result_5 = 
 variant {
   err: Error;
   ok: GetTopupsDTO;
 };
type Result_4 = 
 variant {
   err: Error;
   ok: nat;
 };
type Result_3 = 
 variant {
   err: Error;
   ok: WeeklyLeaderboardDTO;
 };
type Result_23 = 
 variant {
   err: Error;
   ok: AdminDashboardDTO;
 };
type Result_22 = 
 variant {
   err: Error;
   ok: vec ClubDTO;
 };
type Result_21 = 
 variant {
   err: Error;
   ok: vec CountryDTO;
 };
type Result_20 = 
 variant {
   err: Error;
   ok: PickTeamDTO;
 };
type Result_2 = 
 variant {
   err: Error;
   ok: bool;
 };
type Result_19 = 
 variant {
   err: Error;
   ok: vec DataHashDTO;
 };
type Result_18 = 
 variant {
   err: Error;
   ok: FantasyTeamSnapshotDTO;
 };
type Result_17 = 
 variant {
   err: Error;
   ok: vec FootballLeagueDTO;
 };
type Result_16 = 
 variant {
   err: Error;
   ok: MonthlyLeaderboardDTO;
 };
type Result_15 = 
 variant {
   err: Error;
   ok: PlayerDetailDTO;
 };
type Result_14 = 
 variant {
   err: Error;
   ok: vec PlayerPointsDTO;
 };
type Result_13 = 
 variant {
   err: Error;
   ok: vec record {
             nat16;
             PlayerScoreDTO;
           };
 };
type Result_12 = 
 variant {
   err: Error;
   ok: vec FixtureDTO;
 };
type Result_11 = 
 variant {
   err: Error;
   ok: ProfileDTO;
 };
type Result_10 = 
 variant {
   err: Error;
   ok: vec PlayerDTO;
 };
type Result_1 = 
 variant {
   err: Error;
   ok: ManagerDTO;
 };
type Result = 
 variant {
   err: Error;
   ok;
 };
type RescheduleFixtureDTO = 
 record {
   postponedFixtureId: FixtureId;
   updatedFixtureDate: int;
   updatedFixtureGameweek: GameweekNumber;
 };
type RequestManagerDTO = 
 record {
   clubId: ClubId;
   gameweek: GameweekNumber;
   managerId: text;
   month: CalendarMonth;
   seasonId: SeasonId;
 };
type RequestFixturesDTO = record {seasonId: SeasonId;};
type RecallPlayerDTO = record {playerId: PlayerId;};
type PromoteNewClubDTO = 
 record {
   abbreviatedName: text;
   friendlyName: text;
   name: text;
   primaryColourHex: text;
   secondaryColourHex: text;
   shirtType: ShirtType;
   thirdColourHex: text;
 };
type ProfileDTO = 
 record {
   createDate: int;
   favouriteClubId: opt ClubId;
   principalId: text;
   profilePicture: opt blob;
   profilePictureType: text;
   termsAccepted: bool;
   username: text;
 };
type PrincipalId = text;
type PostponeFixtureDTO = record {fixtureId: FixtureId;};
type PlayerStatus = 
 variant {
   Active;
   FreeAgent;
   OnLoan;
   Retired;
 };
type PlayerScoreDTO = 
 record {
   assists: int16;
   clubId: ClubId;
   dateOfBirth: int;
   events: vec PlayerEventData;
   goalsConceded: int16;
   goalsScored: int16;
   id: nat16;
   nationality: CountryId;
   points: int16;
   position: PlayerPosition;
   saves: int16;
 };
type PlayerPosition = 
 variant {
   Defender;
   Forward;
   Goalkeeper;
   Midfielder;
 };
type PlayerPointsDTO = 
 record {
   clubId: ClubId;
   events: vec PlayerEventData;
   gameweek: GameweekNumber;
   id: nat16;
   points: int16;
   position: PlayerPosition;
 };
type PlayerId = nat16;
type PlayerGameweekDTO = 
 record {
   events: vec PlayerEventData;
   fixtureId: FixtureId;
   number: nat8;
   points: int16;
 };
type PlayerEventType = 
 variant {
   Appearance;
   CleanSheet;
   Goal;
   GoalAssisted;
   GoalConceded;
   HighestScoringPlayer;
   KeeperSave;
   OwnGoal;
   PenaltyMissed;
   PenaltySaved;
   RedCard;
   YellowCard;
 };
type PlayerEventData = 
 record {
   clubId: ClubId;
   eventEndMinute: nat8;
   eventStartMinute: nat8;
   eventType: PlayerEventType;
   fixtureId: FixtureId;
   playerId: nat16;
 };
type PlayerDetailDTO = 
 record {
   clubId: ClubId;
   dateOfBirth: int;
   firstName: text;
   gameweeks: vec PlayerGameweekDTO;
   id: PlayerId;
   injuryHistory: vec InjuryHistory;
   lastName: text;
   latestInjuryEndDate: int;
   nationality: CountryId;
   parentClubId: ClubId;
   position: PlayerPosition;
   retirementDate: int;
   seasonId: SeasonId;
   shirtNumber: nat8;
   status: PlayerStatus;
   valueHistory: vec ValueHistory;
   valueQuarterMillions: nat16;
 };
type PlayerDTO = 
 record {
   clubId: ClubId;
   dateOfBirth: int;
   firstName: text;
   id: nat16;
   lastName: text;
   nationality: CountryId;
   position: PlayerPosition;
   shirtNumber: nat8;
   status: PlayerStatus;
   totalPoints: int16;
   valueQuarterMillions: nat16;
 };
type PickTeamDTO = 
 record {
   bankQuarterMillions: nat16;
   braceBonusGameweek: GameweekNumber;
   canisterId: CanisterId;
   captainFantasticGameweek: GameweekNumber;
   captainFantasticPlayerId: PlayerId;
   captainId: PlayerId;
   goalGetterGameweek: GameweekNumber;
   goalGetterPlayerId: PlayerId;
   hatTrickHeroGameweek: GameweekNumber;
   monthlyBonusesAvailable: nat8;
   noEntryGameweek: GameweekNumber;
   noEntryPlayerId: PlayerId;
   oneNationCountryId: CountryId;
   oneNationGameweek: GameweekNumber;
   passMasterGameweek: GameweekNumber;
   passMasterPlayerId: PlayerId;
   playerIds: vec PlayerId;
   principalId: text;
   prospectsGameweek: GameweekNumber;
   safeHandsGameweek: GameweekNumber;
   safeHandsPlayerId: PlayerId;
   teamBoostClubId: ClubId;
   teamBoostGameweek: GameweekNumber;
   transferWindowGameweek: GameweekNumber;
   transfersAvailable: nat8;
   username: text;
 };
type MoveFixtureDTO = 
 record {
   fixtureId: FixtureId;
   updatedFixtureDate: int;
   updatedFixtureGameweek: GameweekNumber;
 };
type MonthlyLeaderboardDTO = 
 record {
   clubId: ClubId;
   entries: vec LeaderboardEntry;
   month: nat8;
   seasonId: SeasonId;
   totalEntries: nat;
 };
type ManagerDTO = 
 record {
   createDate: int;
   favouriteClubId: opt ClubId;
   gameweeks: vec FantasyTeamSnapshot;
   monthlyPoints: int16;
   monthlyPosition: int;
   monthlyPositionText: text;
   principalId: text;
   profilePicture: opt blob;
   seasonPoints: int16;
   seasonPosition: int;
   seasonPositionText: text;
   username: text;
   weeklyPoints: int16;
   weeklyPosition: int;
   weeklyPositionText: text;
 };
type LoanPlayerDTO = 
 record {
   gameweek: GameweekNumber;
   loanClubId: ClubId;
   loanEndDate: int;
   loanLeagueId: FootballLeagueId;
   playerId: PlayerId;
   seasonId: SeasonId;
 };
type LeaderboardEntry = 
 record {
   points: int16;
   position: nat;
   positionText: text;
   principalId: text;
   username: text;
 };
type InjuryHistory = 
 record {
   description: text;
   expectedEndDate: int;
   injuryStartDate: int;
 };
type GetWeeklyLeaderboardDTO = 
 record {
   gameweek: GameweekNumber;
   limit: nat;
   offset: nat;
   searchTerm: text;
   seasonId: SeasonId;
 };
type GetTopupsDTO = 
 record {
   entries: vec TopupDTO;
   limit: nat;
   offset: nat;
   totalEntries: nat;
 };
type GetSnapshotPlayers = 
 record {
   gameweek: GameweekNumber;
   leagueId: FootballLeagueId;
   seasonId: SeasonId;
 };
type GetSeasonLeaderboardDTO = 
 record {
   limit: nat;
   offset: nat;
   searchTerm: text;
   seasonId: SeasonId;
 };
type GetRewardPoolDTO = 
 record {
   rewardPool: RewardPool;
   seasonId: SeasonId;
 };
type GetPlayerDetailsDTO = 
 record {
   playerId: PlayerId;
   seasonId: SeasonId;
 };
type GetMonthlyLeaderboardDTO = 
 record {
   clubId: ClubId;
   limit: nat;
   month: CalendarMonth;
   offset: nat;
   searchTerm: text;
   seasonId: SeasonId;
 };
type GetFantasyTeamSnapshotDTO = 
 record {
   gameweek: GameweekNumber;
   managerPrincipalId: PrincipalId;
   seasonId: SeasonId;
 };
type Gender = 
 variant {
   Female;
   Male;
 };
type GameweekNumber = nat8;
type GameweekFiltersDTO = 
 record {
   gameweek: GameweekNumber;
   seasonId: SeasonId;
 };
type FootballLeagueId = nat16;
type FootballLeagueDTO = 
 record {
   abbreviation: text;
   countryId: CountryId;
   formed: int;
   governingBody: text;
   id: FootballLeagueId;
   logo: blob;
   name: text;
   relatedGender: Gender;
   teamCount: nat8;
 };
type FixtureStatusType = 
 variant {
   Active;
   Complete;
   Finalised;
   Unplayed;
 };
type FixtureId = nat32;
type FixtureDTO = 
 record {
   awayClubId: ClubId;
   awayGoals: nat8;
   events: vec PlayerEventData;
   gameweek: GameweekNumber;
   highestScoringPlayerId: nat16;
   homeClubId: ClubId;
   homeGoals: nat8;
   id: nat32;
   kickOff: int;
   seasonId: SeasonId;
   status: FixtureStatusType;
 };
type FantasyTeamSnapshotDTO = 
 record {
   bankQuarterMillions: nat16;
   braceBonusGameweek: GameweekNumber;
   captainFantasticGameweek: GameweekNumber;
   captainFantasticPlayerId: PlayerId;
   captainId: PlayerId;
   favouriteClubId: ClubId;
   gameweek: GameweekNumber;
   goalGetterGameweek: GameweekNumber;
   goalGetterPlayerId: PlayerId;
   hatTrickHeroGameweek: GameweekNumber;
   month: CalendarMonth;
   monthlyBonusesAvailable: nat8;
   monthlyPoints: int16;
   noEntryGameweek: GameweekNumber;
   noEntryPlayerId: PlayerId;
   oneNationCountryId: CountryId;
   oneNationGameweek: GameweekNumber;
   passMasterGameweek: GameweekNumber;
   passMasterPlayerId: PlayerId;
   playerIds: vec PlayerId;
   points: int16;
   principalId: text;
   prospectsGameweek: GameweekNumber;
   safeHandsGameweek: GameweekNumber;
   safeHandsPlayerId: PlayerId;
   seasonId: SeasonId;
   seasonPoints: int16;
   teamBoostClubId: ClubId;
   teamBoostGameweek: GameweekNumber;
   teamValueQuarterMillions: nat16;
   transferWindowGameweek: GameweekNumber;
   transfersAvailable: nat8;
   username: text;
 };
type FantasyTeamSnapshot = 
 record {
   bankQuarterMillions: nat16;
   braceBonusGameweek: GameweekNumber;
   captainFantasticGameweek: GameweekNumber;
   captainFantasticPlayerId: PlayerId;
   captainId: PlayerId;
   favouriteClubId: opt ClubId;
   gameweek: GameweekNumber;
   goalGetterGameweek: GameweekNumber;
   goalGetterPlayerId: PlayerId;
   hatTrickHeroGameweek: GameweekNumber;
   month: CalendarMonth;
   monthlyBonusesAvailable: nat8;
   monthlyPoints: int16;
   noEntryGameweek: GameweekNumber;
   noEntryPlayerId: PlayerId;
   oneNationCountryId: CountryId;
   oneNationGameweek: GameweekNumber;
   passMasterGameweek: GameweekNumber;
   passMasterPlayerId: PlayerId;
   playerIds: vec PlayerId;
   points: int16;
   principalId: text;
   prospectsGameweek: GameweekNumber;
   safeHandsGameweek: GameweekNumber;
   safeHandsPlayerId: PlayerId;
   seasonId: SeasonId;
   seasonPoints: int16;
   teamBoostClubId: ClubId;
   teamBoostGameweek: GameweekNumber;
   teamValueQuarterMillions: nat16;
   transferWindowGameweek: GameweekNumber;
   transfersAvailable: nat8;
   username: text;
 };
type Error = 
 variant {
   AlreadyExists;
   CanisterCreateError;
   DecodeError;
   DuplicatePlayerInTeam;
   InvalidBonuses;
   InvalidData;
   MoreThan2PlayersFromClub;
   Not11Players;
   NotAllowed;
   NotAuthorized;
   NotFound;
   NumberPerPositionError;
   SelectedCaptainNotInTeam;
   SystemOnHold;
   TeamOverspend;
   TooManyTransfers;
 };
type DataHashDTO = 
 record {
   category: text;
   hash: text;
 };
type CreatePlayerDTO = 
 record {
   clubId: ClubId;
   dateOfBirth: int;
   firstName: text;
   gender: Gender;
   lastName: text;
   nationality: CountryId;
   position: PlayerPosition;
   shirtNumber: nat8;
   valueQuarterMillions: nat16;
 };
type CreateLeagueDTO = 
 record {
   abbreviation: text;
   countryId: CountryId;
   formed: int;
   governingBody: text;
   logo: blob;
   name: text;
   relatedGender: Gender;
   teamCount: nat8;
 };
type CountryId = nat16;
type CountryDTO = 
 record {
   code: text;
   id: CountryId;
   name: text;
 };
type ClubId = nat16;
type ClubFilterDTO = 
 record {
   clubId: ClubId;
   leagueId: FootballLeagueId;
 };
type ClubDTO = 
 record {
   abbreviatedName: text;
   friendlyName: text;
   id: ClubId;
   name: text;
   primaryColourHex: text;
   secondaryColourHex: text;
   shirtType: ShirtType;
   thirdColourHex: text;
 };
type CanisterId = text;
type CalendarMonth = nat8;
type AdminDashboardDTO = 
 record {
   dataCanisterCycles: nat;
   dataCanisterId: CanisterId;
   managerCanisters: vec record {
                           CanisterId;
                           nat;
                         };
   openFPLBackendCycles: nat;
   openFPLCanisterId: CanisterId;
   openWSLBackendCycles: nat;
   openWSLCanisterId: CanisterId;
 };
type AddInitialFixturesDTO = record {seasonFixtures: vec FixtureDTO;};
type AccountIdentifier = blob;
service : {
  createLeague: (CreateLeagueDTO) -> (Result);
  executeAddInitialFixtures: (AddInitialFixturesDTO) -> ();
  executeCreatePlayer: (CreatePlayerDTO) -> ();
  executeLoanPlayer: (LoanPlayerDTO) -> ();
  executeMoveFixture: (MoveFixtureDTO) -> ();
  executePostponeFixture: (PostponeFixtureDTO) -> ();
  executePromoteNewClub: (PromoteNewClubDTO) -> ();
  executeRecallPlayer: (RecallPlayerDTO) -> ();
  executeRescheduleFixture: (RescheduleFixtureDTO) -> ();
  executeRetirePlayer: (RetirePlayerDTO) -> ();
  executeRevaluePlayerDown: (RevaluePlayerDownDTO) -> ();
  executeRevaluePlayerUp: (RevaluePlayerUpDTO) -> ();
  executeSetPlayerInjury: (SetPlayerInjuryDTO) -> ();
  executeSubmitFixtureData: (SubmitFixtureDataDTO) -> ();
  executeTransferPlayer: (TransferPlayerDTO) -> ();
  executeUnretirePlayer: (UnretirePlayerDTO) -> ();
  executeUpdateClub: (UpdateClubDTO) -> ();
  executeUpdatePlayer: (UpdatePlayerDTO) -> ();
  getAdminDashboard: () -> (Result_23);
  getBackendCanisterBalance: () -> (Result_4);
  getCanisterCyclesAvailable: () -> (nat);
  getCanisterCyclesBalance: () -> (Result_4);
  getClubs: () -> (Result_22);
  getCountries: () -> (Result_21) query;
  getCurrentTeam: () -> (Result_20);
  getDataHashes: () -> (Result_19) query;
  getFantasyTeamSnapshot: (GetFantasyTeamSnapshotDTO) -> (Result_18);
  getFixtures: (RequestFixturesDTO) -> (Result_12);
  getLeagues: () -> (Result_17);
  getLoanedPlayers: (ClubFilterDTO) -> (Result_10);
  getManager: (RequestManagerDTO) -> (Result_1);
  getManagerCanisterIds: () -> (vec CanisterId);
  getMonthlyLeaderboard: (GetMonthlyLeaderboardDTO) -> (Result_16);
  getPlayerDetails: (GetPlayerDetailsDTO) -> (Result_15);
  getPlayerDetailsForGameweek: (GameweekFiltersDTO) -> (Result_14);
  getPlayers: () -> (Result_10);
  getPlayersMap: (GameweekFiltersDTO) -> (Result_13);
  getPostponedFixtures: () -> (Result_12);
  getProfile: () -> (Result_11);
  getRetiredPlayers: (ClubFilterDTO) -> (Result_10);
  getRewardPool: (GetRewardPoolDTO) -> (Result_9);
  getSeasonLeaderboard: (GetSeasonLeaderboardDTO) -> (Result_8);
  getSeasons: () -> (Result_7);
  getSnapshotPlayers: (GetSnapshotPlayers) -> (vec PlayerDTO);
  getSystemState: () -> (Result_6);
  getTopups: (GetTopupsDTO) -> (Result_5);
  getTotalManagers: () -> (Result_4);
  getTreasuryAccountPublic: () -> (AccountIdentifier);
  getWeeklyLeaderboard: (GetWeeklyLeaderboardDTO) -> (Result_3);
  isAdmin: () -> (Result_2);
  isUsernameValid: (UsernameFilterDTO) -> (bool) query;
  recalculatePoints: (FootballLeagueId, SeasonId, GameweekNumber,
   CalendarMonth) -> (Result);
  saveFantasyTeam: (UpdateTeamSelectionDTO) -> (Result);
  searchUsername: (UsernameFilterDTO) -> (Result_1);
  setAbbreviatedLeagueName: (FootballLeagueId, text) -> (Result);
  setGameweekTimers: (SeasonId, GameweekNumber) -> ();
  setLeagueCountryId: (FootballLeagueId, CountryId) -> (Result);
  setLeagueDateFormed: (FootballLeagueId, int) -> (Result);
  setLeagueGender: (FootballLeagueId, Gender) -> (Result);
  setLeagueGoverningBody: (FootballLeagueId, text) -> (Result);
  setLeagueLogo: (FootballLeagueId, blob) -> (Result);
  setLeagueName: (FootballLeagueId, text) -> (Result);
  setTeamCount: (FootballLeagueId, nat8) -> (Result);
  snapshotManagers: (SeasonId, GameweekNumber, CalendarMonth) -> (Result);
  updateFavouriteClub: (UpdateFavouriteClubDTO) -> (Result);
  updateProfilePicture: (UpdateProfilePictureDTO) -> (Result);
  updateRewardPools: (UpdateRewardPoolsDTO) -> (Result);
  updateSystemStatus: (UpdateSystemStatusDTO) -> (Result);
  updateUsername: (UpdateUsernameDTO) -> (Result);
  validateAddInitialFixtures: (AddInitialFixturesDTO) -> (RustResult) query;
  validateCreatePlayer: (CreatePlayerDTO) -> (RustResult) query;
  validateLoanPlayer: (LoanPlayerDTO) -> (RustResult) query;
  validateMoveFixture: (MoveFixtureDTO) -> (RustResult) query;
  validatePostponeFixture: (PostponeFixtureDTO) -> (RustResult) query;
  validatePromoteNewClub: (PromoteNewClubDTO) -> (RustResult) query;
  validateRecallPlayer: (RecallPlayerDTO) -> (RustResult) query;
  validateRescheduleFixture: (RescheduleFixtureDTO) -> (RustResult) query;
  validateRetirePlayer: (RetirePlayerDTO) -> (RustResult) query;
  validateRevaluePlayerDown: (RevaluePlayerDownDTO) -> (RustResult) query;
  validateRevaluePlayerUp: (RevaluePlayerUpDTO) -> (RustResult) query;
  validateSetPlayerInjury: (SetPlayerInjuryDTO) -> (RustResult) query;
  validateSubmitFixtureData: (SubmitFixtureDataDTO) -> (RustResult) query;
  validateTransferPlayer: (TransferPlayerDTO) -> (RustResult) query;
  validateUnretirePlayer: (UnretirePlayerDTO) -> (RustResult) query;
  validateUpdateClub: (UpdateClubDTO) -> (RustResult) query;
  validateUpdatePlayer: (UpdatePlayerDTO) -> (RustResult) query;
  viewPayouts: (GameweekNumber) -> (Result);
}
