type WeeklyRewardsDTO = 
 record {
   gameweek: GameweekNumber;
   rewards: vec RewardEntry;
   seasonId: SeasonId;
 };
type WeeklyLeaderboardDTO = 
 record {
   entries: vec LeaderboardEntryDTO;
   gameweek: GameweekNumber;
   seasonId: SeasonId;
   totalEntries: nat;
 };
type UpdateUsernameDTO = record {username: text;};
type UpdateProfilePictureDTO = 
 record {
   extension: text;
   profilePicture: blob;
 };
type UpdateFavouriteClubDTO = record {favouriteClubId: ClubId;};
type UpdateAppStatusDTO = 
 record {
   onHold: bool;
   version: text;
 };
type TeamSelectionDTO = 
 record {
   bankQuarterMillions: nat16;
   braceBonusGameweek: GameweekNumber;
   canisterId: CanisterId;
   captainFantasticGameweek: GameweekNumber;
   captainFantasticPlayerId: ClubId;
   captainId: ClubId;
   firstGameweek: bool;
   goalGetterGameweek: GameweekNumber;
   goalGetterPlayerId: ClubId;
   hatTrickHeroGameweek: GameweekNumber;
   monthlyBonusesAvailable: nat8;
   noEntryGameweek: GameweekNumber;
   noEntryPlayerId: ClubId;
   oneNationCountryId: CountryId;
   oneNationGameweek: GameweekNumber;
   passMasterGameweek: GameweekNumber;
   passMasterPlayerId: ClubId;
   playerIds: vec ClubId;
   principalId: text;
   prospectsGameweek: GameweekNumber;
   safeHandsGameweek: GameweekNumber;
   safeHandsPlayerId: ClubId;
   teamBoostClubId: ClubId;
   teamBoostGameweek: GameweekNumber;
   transferWindowGameweek: GameweekNumber;
   transfersAvailable: nat8;
   username: text;
 };
type SeasonId = nat16;
type SaveTeamDTO = 
 record {
   captainId: ClubId;
   playerIds: vec PlayerId;
   teamName: opt text;
   transferWindowGameweek: opt GameweekNumber;
 };
type SaveBonusDTO = 
 record {
   braceBonusGameweek: opt GameweekNumber;
   captainFantasticGameweek: opt GameweekNumber;
   captainFantasticPlayerId: opt ClubId;
   goalGetterGameweek: opt GameweekNumber;
   goalGetterPlayerId: opt ClubId;
   hatTrickHeroGameweek: opt GameweekNumber;
   noEntryGameweek: opt GameweekNumber;
   noEntryPlayerId: opt ClubId;
   oneNationCountryId: opt CountryId;
   oneNationGameweek: opt GameweekNumber;
   passMasterGameweek: opt GameweekNumber;
   passMasterPlayerId: opt ClubId;
   prospectsGameweek: opt GameweekNumber;
   safeHandsGameweek: opt GameweekNumber;
   safeHandsPlayerId: opt ClubId;
   teamBoostClubId: opt ClubId;
   teamBoostGameweek: opt GameweekNumber;
 };
type RewardType = 
 variant {
   HighestScoringPlayer;
   MonthlyATHScore;
   MonthlyLeaderboard;
   MostValuableTeam;
   SeasonATHScore;
   SeasonLeaderboard;
   WeeklyATHScore;
   WeeklyLeaderboard;
 };
type RewardRatesDTO = 
 record {
   allTimeMonthlyHighScoreRewardRate: nat64;
   allTimeSeasonHighScoreRewardRate: nat64;
   allTimeWeeklyHighScoreRewardRate: nat64;
   highestScoringMatchRewardRate: nat64;
   monthlyLeaderboardRewardRate: nat64;
   mostValuableTeamRewardRate: nat64;
   seasonLeaderboardRewardRate: nat64;
   weeklyLeaderboardRewardRate: nat64;
 };
type RewardEntry = 
 record {
   amount: nat64;
   position: nat;
   principalId: text;
   rewardType: RewardType;
 };
type Result_9 = 
 variant {
   err: Error;
   ok: ManagerGameweekDTO;
 };
type Result_8 = 
 variant {
   err: Error;
   ok: vec CanisterId;
 };
type Result_7 = 
 variant {
   err: Error;
   ok: ProfileDTO;
 };
type Result_6 = 
 variant {
   err: Error;
   ok: AppStatusDTO;
 };
type Result_5 = 
 variant {
   err: Error;
   ok: nat;
 };
type Result_4 = 
 variant {
   err: Error;
   ok: vec record {
             SeasonId;
             vec record {
                   GameweekNumber;
                   CanisterId;
                 };
           };
 };
type Result_3 = 
 variant {
   err: Error;
   ok: WeeklyLeaderboardDTO;
 };
type Result_2 = 
 variant {
   err: Error;
   ok: WeeklyRewardsDTO;
 };
type Result_13 = 
 variant {
   err: Error;
   ok: text;
 };
type Result_12 = 
 variant {
   err: Error;
   ok: RewardRatesDTO;
 };
type Result_11 = 
 variant {
   err: Error;
   ok: vec CanisterDTO;
 };
type Result_10 = 
 variant {
   err: Error;
   ok: TeamSelectionDTO;
 };
type Result_1 = 
 variant {
   err: Error;
   ok: ManagerDTO;
 };
type Result = 
 variant {
   err: Error;
   ok;
 };
type ProfileDTO = 
 record {
   createDate: int;
   favouriteClubId: opt ClubId;
   principalId: text;
   profilePicture: opt blob;
   profilePictureType: text;
   termsAccepted: bool;
   username: text;
 };
type PrincipalId = text;
type PlayerStatus = 
 variant {
   Active;
   FreeAgent;
   OnLoan;
   Retired;
 };
type PlayerPosition = 
 variant {
   Defender;
   Forward;
   Goalkeeper;
   Midfielder;
 };
type PlayerId = nat16;
type PlayerDTO = 
 record {
   clubId: ClubId;
   currentLoanEndDate: int;
   dateOfBirth: int;
   firstName: text;
   id: nat16;
   lastName: text;
   leagueId: LeagueId;
   nationality: CountryId;
   parentClubId: ClubId;
   parentLeagueId: LeagueId;
   position: PlayerPosition;
   shirtNumber: nat8;
   status: PlayerStatus;
   valueQuarterMillions: nat16;
 };
type ManagerGameweekDTO = 
 record {
   bankQuarterMillions: nat16;
   braceBonusGameweek: GameweekNumber;
   captainFantasticGameweek: GameweekNumber;
   captainFantasticPlayerId: PlayerId;
   captainId: PlayerId;
   favouriteClubId: opt ClubId;
   gameweek: GameweekNumber;
   goalGetterGameweek: GameweekNumber;
   goalGetterPlayerId: PlayerId;
   hatTrickHeroGameweek: GameweekNumber;
   month: CalendarMonth;
   monthlyBonusesAvailable: nat8;
   monthlyPoints: int16;
   noEntryGameweek: GameweekNumber;
   noEntryPlayerId: PlayerId;
   oneNationCountryId: CountryId;
   oneNationGameweek: GameweekNumber;
   passMasterGameweek: GameweekNumber;
   passMasterPlayerId: PlayerId;
   playerIds: vec PlayerId;
   points: int16;
   principalId: text;
   prospectsGameweek: GameweekNumber;
   safeHandsGameweek: GameweekNumber;
   safeHandsPlayerId: PlayerId;
   seasonId: SeasonId;
   seasonPoints: int16;
   teamBoostClubId: ClubId;
   teamBoostGameweek: GameweekNumber;
   teamValueQuarterMillions: nat16;
   transferWindowGameweek: GameweekNumber;
   transfersAvailable: nat8;
   username: text;
 };
type ManagerDTO = 
 record {
   createDate: int;
   favouriteClubId: opt ClubId;
   gameweeks: vec ManagerGameweekDTO;
   monthlyPoints: int16;
   monthlyPosition: int;
   monthlyPositionText: text;
   principalId: text;
   profilePicture: opt blob;
   profilePictureType: text;
   seasonPoints: int16;
   seasonPosition: int;
   seasonPositionText: text;
   username: text;
   weeklyPoints: int16;
   weeklyPosition: int;
   weeklyPositionText: text;
 };
type LeagueId = nat16;
type LeaderboardEntryDTO = 
 record {
   points: int16;
   position: nat;
   positionText: text;
   principalId: text;
   username: text;
 };
type IsUsernameValid = record {username: text;};
type GetWeeklyRewardsDTO = 
 record {
   gameweek: GameweekNumber;
   seasonId: SeasonId;
 };
type GetWeeklyLeaderboardDTO = 
 record {
   gameweek: GameweekNumber;
   limit: nat;
   offset: nat;
   searchTerm: text;
   seasonId: SeasonId;
 };
type GetSnapshotPlayersDTO = 
 record {
   gameweek: GameweekNumber;
   seasonId: SeasonId;
 };
type GetManagerGameweekDTO = 
 record {
   gameweek: GameweekNumber;
   principalId: PrincipalId;
   seasonId: SeasonId;
 };
type GetManagerDTO = 
 record {
   gameweek: GameweekNumber;
   month: CalendarMonth;
   principalId: PrincipalId;
   seasonId: SeasonId;
 };
type GetManagerByUsername = record {username: text;};
type GetCanistersDTO = record {canisterType: CanisterType;};
type GameweekNumber = nat8;
type Error = 
 variant {
   AlreadyExists;
   CanisterCreateError;
   DecodeError;
   DuplicatePlayerInTeam;
   InvalidBonuses;
   InvalidData;
   MoreThan2PlayersFromClub;
   Not11Players;
   NotAllowed;
   NotAuthorized;
   NotFound;
   NumberPerPositionError;
   SelectedCaptainNotInTeam;
   SystemOnHold;
   TeamOverspend;
   TooManyTransfers;
 };
type CreateManagerDTO = 
 record {
   favouriteClubId: opt ClubId;
   username: text;
 };
type CountryId = nat16;
type ClubId = nat16;
type CanisterType = 
 variant {
   Archive;
   Dapp;
   Leaderboard;
   Manager;
   SNS;
 };
type CanisterTopup = 
 record {
   canisterId: CanisterId;
   cyclesAmount: nat;
   topupTime: int;
 };
type CanisterId = text;
type CanisterDTO = 
 record {
   canisterId: CanisterId;
   computeAllocation: nat;
   cycles: nat;
   topups: vec CanisterTopup;
 };
type CalendarMonth = nat8;
type AppStatusDTO = 
 record {
   onHold: bool;
   version: text;
 };
service : {
  calculateWeeklyRewards: (GameweekNumber) -> (Result);
  createManager: (CreateManagerDTO) -> (Result);
  getActiveLeaderboardCanisterId: () -> (Result_13);
  getActiveRewardRates: () -> (Result_12);
  getAppStatus: () -> (Result_6) query;
  getCanisters: (GetCanistersDTO) -> (Result_11);
  getCurrentTeam: () -> (Result_10);
  getEveryPlayer: () -> (vec record {
                               GameweekNumber;
                               vec PlayerDTO;
                             }) query;
  getFantasyTeamSnapshot: (GetManagerGameweekDTO) -> (Result_9);
  getLeaderboardCanisterIds: () -> (Result_8);
  getManager: (GetManagerDTO) -> (Result_1);
  getManagerCanisterIds: () -> (Result_8);
  getPlayersSnapshot: (GetSnapshotPlayersDTO) -> (vec PlayerDTO) query;
  getProfile: () -> (Result_7);
  getSystemState: () -> (Result_6) query;
  getTopups: () -> (vec CanisterTopup) query;
  getTotalManagers: () -> (Result_5) query;
  getWeeklyCanisters: () -> (Result_4) query;
  getWeeklyLeaderboard: (GetWeeklyLeaderboardDTO) -> (Result_3);
  getWeeklyRewards: (GetWeeklyRewardsDTO) -> (Result_2) query;
  isUsernameValid: (IsUsernameValid) -> (bool) query;
  notifyAppsOfFixtureFinalised: (SeasonId, GameweekNumber) -> (Result);
  notifyAppsOfGameweekStarting: (SeasonId, GameweekNumber) -> (Result);
  notifyAppsOfLoan: (PlayerId) -> (Result);
  notifyAppsOfPositionChange: (PlayerId) -> (Result);
  notifyAppsOfTransfer: (PlayerId) -> (Result);
  payWeeklyRewards: (GameweekNumber) -> (Result);
  saveBonusSelection: (SaveBonusDTO) -> (Result);
  saveTeamSelection: (SaveTeamDTO) -> (Result);
  searchUsername: (GetManagerByUsername) -> (Result_1);
  updateDataHashes: (text) -> (Result);
  updateFavouriteClub: (UpdateFavouriteClubDTO) -> (Result);
  updateProfilePicture: (UpdateProfilePictureDTO) -> (Result);
  updateSystemState: (UpdateAppStatusDTO) -> (Result);
  updateUsername: (UpdateUsernameDTO) -> (Result);
}
