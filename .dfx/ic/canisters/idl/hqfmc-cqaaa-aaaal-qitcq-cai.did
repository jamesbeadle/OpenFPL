type TransformArgs = 
 record {
   context: blob;
   response: HttpResponsePayload;
 };
type StakeMaturityResponse = 
 record {
   maturity_e8s: nat64;
   stake_maturity_e8s: nat64;
 };
type SpawnResponse = record {created_neuron_id: opt NeuronId;};
type Spawn = 
 record {
   new_controller: opt principal;
   nonce: opt nat64;
   percentage_to_spawn: opt nat32;
 };
type SetDissolveTimestamp = record {dissolve_timestamp_seconds: nat64;};
type Operation = 
 variant {
   ChangeAutoStakeMaturity: ChangeAutoStakeMaturity;
   IncreaseDissolveDelay: IncreaseDissolveDelay;
   SetDissolveTimestamp: SetDissolveTimestamp;
   StartDissolving;
   StopDissolving;
 };
type NeuronResponse = 
 variant {
   err: Error;
   ok: ManageNeuronResponse;
 };
type NeuronId = record {id: nat64;};
type NeuronController = 
 service {
   getAccountIdentifier: () -> (AccountId) query;
   getBackendCanisterId: () -> (text);
   getLedgerAddress: () -> (Address) query;
   getNeuronAddress: () -> (Address) query;
   getNeuronId: () -> (nat64) query;
   getNeuronResponse: () -> (opt NeuronResponse) query;
   init: () -> (AsyncReturn);
   manage_neuron: (Command) -> (NeuronResponse);
   stake_nns_neuron: () -> (NeuronResponse);
   transform: (TransformArgs) -> (HttpResponsePayload) query;
 };
type ManageNeuronResponse = record {command: opt CommandResponse;};
type IncreaseDissolveDelay = record {
                               additional_dissolve_delay_seconds: nat32;};
type HttpResponsePayload = 
 record {
   body: vec nat8;
   headers: vec HttpHeader;
   status: nat;
 };
type HttpHeader = 
 record {
   name: text;
   value: text;
 };
type GovernanceError = 
 record {
   error_message: text;
   error_type: int32;
 };
type Follow = 
 record {
   followees: vec NeuronId;
   topic: int32;
 };
type Error = 
 variant {
   expired;
   fatal: text;
   fee_not_defined: text;
   invalid: text;
   missing: text;
   other: text;
   rejected: text;
   trapped: text;
 };
type DisburseResponse = record {transfer_block_height: nat64;};
type Disburse = 
 record {
   amount: opt Amount;
   to_account: opt AccountIdentifier;
 };
type Configure = record {operation: opt Operation;};
type CommandResponse = 
 variant {
   ClaimOrRefresh: ClaimOrRefreshResponse;
   Configure;
   Disburse: DisburseResponse;
   Error: GovernanceError;
   Follow;
   Spawn: SpawnResponse;
   StakeMaturity: StakeMaturityResponse;
 };
type Command = 
 variant {
   ClaimOrRefresh: ClaimOrRefresh;
   Configure: Configure;
   Disburse: Disburse;
   Follow: Follow;
   Spawn: Spawn;
   StakeMaturity: StakeMaturityResponse;
 };
type ClaimOrRefreshResponse = record {refreshed_neuron_id: opt NeuronId;};
type ClaimOrRefreshNeuronFromAccount = 
 record {
   controller: opt principal;
   memo: nat64;
 };
type ClaimOrRefresh = record {by: opt By;};
type ChangeAutoStakeMaturity = record {
                                 requested_setting_for_auto_stake_maturity:
                                  bool;};
type By = 
 variant {
   Memo: nat64;
   MemoAndController: ClaimOrRefreshNeuronFromAccount;
   NeuronIdOrSubaccount;
 };
type AsyncReturn = 
 variant {
   err: AsyncError;
   ok;
 };
type AsyncError = 
 variant {
   fee_not_defined: text;
   other: text;
   trapped: text;
 };
type Amount = record {e8s: nat64;};
type Address = text;
type AccountIdentifier = record {hash: vec nat8;};
type AccountId = blob;
service : () -> NeuronController
