// Version: 1.0.0
type CalendarMonth = Nat8;
type CanisterId = Text;
type ClubId = Nat16;
type CountryId = Nat16;
type DataHash = {category : Text; hash : Text};
type FixtureId = Nat32;
type GameweekNumber = Nat8;
type Gender = {#Female; #Male};
type HighScoreRecord =
  {createDate : Int; points : Int16; recordType : RecordType};
type InjuryHistory =
  {description : Text; expectedEndDate : Int; injuryStartDate : Int};
type LeaderboardCanister =
  {leaderboardInfo : LeaderboardInfo; leaderboardType : LeaderboardType};
type LeaderboardEntry =
  {
    points : Int16;
    position : Nat;
    positionText : Text;
    principalId : Text;
    username : Text
  };
type LeaderboardInfo =
  {
    #Monthly : MonthlyLeaderboardInfo;
    #Season : SeasonLeaderboardInfo;
    #Weekly : WeeklyLeaderboardInfo
  };
type LeaderboardType = {#Monthly; #Season; #Weekly};
type LeagueId = Nat16;
type List<T> = ?(T, List<T>);
type MonthlyLeaderboardInfo =
  {
    canisterId : Text;
    clubId : ClubId;
    month : CalendarMonth;
    seasonId : SeasonId
  };
type MonthlyRewards =
  {month : CalendarMonth; rewards : List<RewardEntry>; seasonId : SeasonId};
type Player =
  {
    clubId : ClubId;
    currentLoanEndDate : Int;
    dateOfBirth : Int;
    firstName : Text;
    gender : Gender;
    id : PlayerId;
    injuryHistory : List<InjuryHistory>;
    lastName : Text;
    latestInjuryEndDate : Int;
    nationality : CountryId;
    parentClubId : Nat16;
    position : PlayerPosition;
    retirementDate : Int;
    seasons : List<PlayerSeason>;
    shirtNumber : Nat8;
    status : PlayerStatus;
    transferHistory : List<TransferHistory>;
    valueHistory : List<ValueHistory>;
    valueQuarterMillions : Nat16
  };
type PlayerEventData =
  {
    clubId : ClubId;
    eventEndMinute : Nat8;
    eventStartMinute : Nat8;
    eventType : PlayerEventType;
    fixtureId : FixtureId;
    playerId : Nat16
  };
type PlayerEventType =
  {
    #Appearance;
    #CleanSheet;
    #Goal;
    #GoalAssisted;
    #GoalConceded;
    #HighestScoringPlayer;
    #KeeperSave;
    #OwnGoal;
    #PenaltyMissed;
    #PenaltySaved;
    #RedCard;
    #YellowCard
  };
type PlayerGameweek =
  {events : List<PlayerEventData>; number : GameweekNumber; points : Int16};
type PlayerId = Nat16;
type PlayerPosition = {#Defender; #Forward; #Goalkeeper; #Midfielder};
type PlayerSeason =
  {gameweeks : List<PlayerGameweek>; id : SeasonId; totalPoints : Int16};
type PlayerStatus = {#Active; #FreeAgent; #OnLoan; #Retired};
type PrincipalId = Text;
type RecordType = {#MonthlyHighScore; #SeasonHighScore; #WeeklyHighScore};
type RewardEntry =
  {
    amount : Nat64;
    position : Nat;
    principalId : Text;
    rewardType : RewardType
  };
type RewardPool =
  {
    allTimeMonthlyHighScorePool : Nat64;
    allTimeSeasonHighScorePool : Nat64;
    allTimeWeeklyHighScorePool : Nat64;
    highestScoringMatchPlayerPool : Nat64;
    monthlyLeaderboardPool : Nat64;
    mostValuableTeamPool : Nat64;
    seasonId : SeasonId;
    seasonLeaderboardPool : Nat64;
    weeklyLeaderboardPool : Nat64
  };
type RewardType =
  {
    #HighestScoringPlayer;
    #MonthlyATHScore;
    #MonthlyLeaderboard;
    #MostValuableTeam;
    #SeasonATHScore;
    #SeasonLeaderboard;
    #WeeklyATHScore;
    #WeeklyLeaderboard
  };
type RewardsList = {rewards : List<RewardEntry>};
type SeasonId = Nat16;
type SeasonLeaderboardInfo = {canisterId : Text; seasonId : SeasonId};
type SeasonRewards = {rewards : List<RewardEntry>; seasonId : SeasonId};
type TeamValueLeaderboard =
  {entries : List<LeaderboardEntry>; seasonId : SeasonId; totalEntries : Nat};
type TimerInfo = {callbackName : Text; id : Int; triggerTime : Int};
type TransferHistory =
  {
    fromClub : ClubId;
    fromLeagueId : LeagueId;
    loanEndDate : Int;
    toClub : ClubId;
    toLeagueId : LeagueId;
    transferDate : Int
  };
type ValueHistory = {changedOn : Int; newValue : Nat16; oldValue : Nat16};
type WeeklyLeaderboardInfo =
  {canisterId : Text; gameweek : GameweekNumber; seasonId : SeasonId};
type WeeklyRewards =
  {
    gameweek : GameweekNumber;
    rewards : List<RewardEntry>;
    seasonId : SeasonId
  };
actor {
  stable var stable_active_leaderbord_canister_id : Text;
  stable var stable_active_manager_canister_id : Text;
  stable var stable_data_hashes : [DataHash];
  stable var stable_high_scoring_player_rewards : [RewardsList];
  stable var stable_leaderboard_canisters : [LeaderboardCanister];
  stable var stable_manager_canister_ids : [(PrincipalId, CanisterId)];
  stable var stable_monthly_all_time_high_scores : [HighScoreRecord];
  stable var stable_monthly_ath_prize_pool : Nat64;
  stable var stable_monthly_rewards : [MonthlyRewards];
  stable var stable_most_valuable_team_rewards : [RewardsList];
  stable var stable_player_snapshots :
    [(SeasonId, [(GameweekNumber, [Player])])];
  stable var stable_reward_pools : [(SeasonId, RewardPool)];
  stable var stable_season_all_time_high_scores : [HighScoreRecord];
  stable var stable_season_ath_prize_pool : Nat64;
  stable var stable_season_rewards : [SeasonRewards];
  stable var stable_system_state :
    {
      calculationGameweek : GameweekNumber;
      calculationMonth : CalendarMonth;
      calculationSeasonId : SeasonId;
      onHold : Bool;
      pickTeamGameweek : GameweekNumber;
      pickTeamMonth : CalendarMonth;
      pickTeamSeasonId : SeasonId;
      seasonActive : Bool;
      transferWindowActive : Bool;
      version : Text
    };
  stable var stable_team_value_leaderboards :
    [(SeasonId, TeamValueLeaderboard)];
  stable var stable_total_managers : Nat;
  stable var stable_unique_manager_canister_ids : [CanisterId];
  stable var stable_usernames : [(PrincipalId, Text)];
  stable var stable_weekly_all_time_high_scores : [HighScoreRecord];
  stable var stable_weekly_ath_prize_pool : Nat64;
  stable var stable_weekly_rewards : [WeeklyRewards];
  stable var timers : [TimerInfo]
};
