type WeeklyLeaderboard = 
 record {
   entries: vec LeaderboardEntry__1;
   gameweek: GameweekNumber;
   page: nat;
   seasonId: SeasonId;
   totalEntries: nat;
 };
type WaterwayLabsApp = 
 variant {
   FootballGod;
   GolfPad;
   ICF1;
   ICFC;
   ICGC;
   ICPCasino;
   ICPFA;
   JeffBets;
   OpenBeats;
   OpenBook;
   OpenCare;
   OpenChef;
   OpenFPL;
   OpenWSL;
   TransferKings;
   WaterwayLabs;
 };
type ValueHistory = 
 record {
   changedOn: int;
   newValue: nat16;
   oldValue: nat16;
 };
type UpdateICFCProfile = 
 record {
   membershipType: MembershipType;
   subApp: SubApp;
   subAppUserPrincipalId: PrincipalId;
 };
type TeamValueLeaderboardEntry = 
 record {
   bonusPlayed: opt BonusType;
   membershipLevel: MembershipType;
   nationalityId: opt CountryId;
   position: nat;
   positionText: text;
   principalId: PrincipalId;
   profilePicture: opt blob;
   rewardAmount: opt nat64;
   teamValue: nat16;
   username: text;
 };
type TeamSetup = 
 record {
   bankQuarterMillions: nat16;
   braceBonusGameweek: GameweekNumber;
   canisterId: CanisterId;
   captainFantasticGameweek: GameweekNumber;
   captainFantasticPlayerId: ClubId;
   captainId: ClubId;
   firstGameweek: bool;
   goalGetterGameweek: GameweekNumber;
   goalGetterPlayerId: ClubId;
   hatTrickHeroGameweek: GameweekNumber;
   monthlyBonusesAvailable: nat8;
   noEntryGameweek: GameweekNumber;
   noEntryPlayerId: ClubId;
   oneNationCountryId: CountryId;
   oneNationGameweek: GameweekNumber;
   passMasterGameweek: GameweekNumber;
   passMasterPlayerId: ClubId;
   playerIds: vec ClubId;
   principalId: text;
   prospectsGameweek: GameweekNumber;
   safeHandsGameweek: GameweekNumber;
   safeHandsPlayerId: ClubId;
   teamBoostClubId: ClubId;
   teamBoostGameweek: GameweekNumber;
   transferWindowGameweek: GameweekNumber;
   transfersAvailable: nat8;
   username: text;
 };
type SubApp = 
 variant {
   FootballGod;
   JeffBets;
   OpenFPL;
   OpenWSL;
   TransferKings;
 };
type ShirtType = 
 variant {
   Filled;
   Striped;
 };
type SetFavouriteClub = 
 record {
   favouriteClubId: ClubId;
   principalId: PrincipalId;
 };
type Seasons = record {seasons: vec Season;};
type SeasonLeaderboard = 
 record {
   entries: vec LeaderboardEntry__1;
   seasonId: SeasonId;
   totalEntries: nat;
 };
type SeasonId = nat16;
type Season = 
 record {
   id: nat16;
   name: text;
   year: nat16;
 };
type SaveFantasyTeam = 
 record {
   captainId: ClubId;
   playTransferWindowBonus: bool;
   playerIds: vec PlayerId;
   principalId: PrincipalId;
 };
type RewardRates = 
 record {
   allTimeMonthlyHighScoreRewardRate: nat64;
   allTimeSeasonHighScoreRewardRate: nat64;
   allTimeWeeklyHighScoreRewardRate: nat64;
   highestScoringMatchRewardRate: nat64;
   monthlyLeaderboardRewardRate: nat64;
   mostValuableTeamRewardRate: nat64;
   seasonLeaderboardRewardRate: nat64;
   weeklyLeaderboardRewardRate: nat64;
 };
type Result_9 = 
 variant {
   err: Error;
   ok: PlayersMap;
 };
type Result_8 = 
 variant {
   err: Error;
   ok: PlayersSnapshot;
 };
type Result_7 = 
 variant {
   err: Error;
   ok: CombinedProfile;
 };
type Result_6 = 
 variant {
   err: Error;
   ok: ProjectCanisters;
 };
type Result_5 = 
 variant {
   err: Error;
   ok: SeasonLeaderboard;
 };
type Result_4 = 
 variant {
   err: Error;
   ok: Seasons;
 };
type Result_3 = 
 variant {
   err: Error;
   ok: TeamSetup;
 };
type Result_29 = 
 variant {
   err: Error;
   ok: RewardRates;
 };
type Result_28 = 
 variant {
   err: Error;
   ok: AllTimeHighScores;
 };
type Result_27 = 
 variant {
   err: Error;
   ok: AppStatus;
 };
type Result_26 = 
 variant {
   err: Error;
   ok: Clubs;
 };
type Result_25 = 
 variant {
   err: Error;
   ok: Countries;
 };
type Result_24 = 
 variant {
   err: Error;
   ok: vec DataHash;
 };
type Result_23 = 
 variant {
   err: Error;
   ok: FantasyTeamSnapshot;
 };
type Result_22 = 
 variant {
   err: Error;
   ok: Fixtures;
 };
type Result_21 = 
 variant {
   err: Error;
   ok: text;
 };
type Result_20 = 
 variant {
   err: Error;
   ok: ICFCLinkStatus;
 };
type Result_2 = 
 variant {
   err: Error;
   ok: nat;
 };
type Result_19 = 
 variant {
   err: Error;
   ok: vec ICFCLinks;
 };
type Result_18 = 
 variant {
   err: Error;
   ok: LeagueStatus;
 };
type Result_17 = 
 variant {
   err: Error;
   ok: Manager;
 };
type Result_16 = 
 variant {
   err: Error;
   ok: vec CanisterId;
 };
type Result_15 = 
 variant {
   err: Error;
   ok: MonthlyLeaderboard;
 };
type Result_14 = 
 variant {
   err: Error;
   ok: MostValuableGameweekPlayers;
 };
type Result_13 = 
 variant {
   err: Error;
   ok: MostValuableTeamLeaderboard;
 };
type Result_12 = 
 variant {
   err: Error;
   ok: PlayerDetails;
 };
type Result_11 = 
 variant {
   err: Error;
   ok: PlayerDetailsForGameweek;
 };
type Result_10 = 
 variant {
   err: Error;
   ok: Players;
 };
type Result_1 = 
 variant {
   err: Error;
   ok: WeeklyLeaderboard;
 };
type Result = 
 variant {
   err: Error;
   ok;
 };
type RemoveController = 
 record {
   app: WaterwayLabsApp;
   canisterId: CanisterId;
   controller: PrincipalId;
 };
type ProjectCanisters = record {entries: vec Canister;};
type PrincipalId = text;
type PlayersSnapshot = record {players: vec Player;};
type PlayersMap = record {playersMap: vec record {
                                            nat16;
                                            PlayerScore;
                                          };};
type Players = record {players: vec Player__1;};
type Player__1 = 
 record {
   clubId: nat16;
   currentLoanEndDate: int;
   dateOfBirth: int;
   firstName: text;
   id: nat16;
   lastName: text;
   leagueId: nat16;
   nationality: nat16;
   parentClubId: nat16;
   parentLeagueId: nat16;
   position: PlayerPosition__1;
   shirtNumber: nat8;
   status: PlayerStatus__1;
   valueQuarterMillions: nat16;
 };
type PlayerStatus__2 = 
 variant {
   Active;
   FreeAgent;
   OnLoan;
   Retired;
 };
type PlayerStatus__1 = 
 variant {
   Active;
   FreeAgent;
   OnLoan;
   Retired;
 };
type PlayerStatus = 
 variant {
   Active;
   FreeAgent;
   OnLoan;
   Retired;
 };
type PlayerScore = 
 record {
   assists: int16;
   clubId: nat16;
   dateOfBirth: int;
   events: vec PlayerEventData__2;
   goalsConceded: int16;
   goalsScored: int16;
   id: nat16;
   nationality: nat16;
   points: int16;
   position: PlayerPosition__1;
   saves: int16;
 };
type PlayerPosition__2 = 
 variant {
   Defender;
   Forward;
   Goalkeeper;
   Midfielder;
 };
type PlayerPosition__1 = 
 variant {
   Defender;
   Forward;
   Goalkeeper;
   Midfielder;
 };
type PlayerPosition = 
 variant {
   Defender;
   Forward;
   Goalkeeper;
   Midfielder;
 };
type PlayerPoints = 
 record {
   clubId: nat16;
   events: vec PlayerEventData__2;
   gameweek: nat8;
   id: nat16;
   points: int16;
   position: PlayerPosition__1;
 };
type PlayerId = nat16;
type PlayerGameweek = 
 record {
   events: vec PlayerEventData;
   fixtureId: FixtureId;
   number: nat8;
   points: int16;
 };
type PlayerEventType__1 = 
 variant {
   Appearance;
   CleanSheet;
   Goal;
   GoalAssisted;
   GoalConceded;
   HighestScoringPlayer;
   KeeperSave;
   OwnGoal;
   PenaltyMissed;
   PenaltySaved;
   RedCard;
   YellowCard;
 };
type PlayerEventType = 
 variant {
   Appearance;
   CleanSheet;
   Goal;
   GoalAssisted;
   GoalConceded;
   HighestScoringPlayer;
   KeeperSave;
   OwnGoal;
   PenaltyMissed;
   PenaltySaved;
   RedCard;
   YellowCard;
 };
type PlayerEventData__2 = 
 record {
   clubId: nat16;
   eventEndMinute: nat8;
   eventStartMinute: nat8;
   eventType: PlayerEventType;
   fixtureId: nat32;
   playerId: nat16;
 };
type PlayerEventData__1 = 
 record {
   clubId: nat16;
   eventEndMinute: nat8;
   eventStartMinute: nat8;
   eventType: PlayerEventType;
   fixtureId: nat32;
   playerId: nat16;
 };
type PlayerEventData = 
 record {
   clubId: ClubId;
   eventEndMinute: nat8;
   eventStartMinute: nat8;
   eventType: PlayerEventType__1;
   fixtureId: FixtureId;
   playerId: nat16;
 };
type PlayerDetailsForGameweek = record {playerPoints: vec PlayerPoints;};
type PlayerDetails = record {player: DetailedPlayer;};
type PlayerChangeNotification = 
 record {
   leagueId: LeagueId;
   playerId: PlayerId;
 };
type Player = 
 record {
   clubId: nat16;
   currentLoanEndDate: int;
   dateOfBirth: int;
   firstName: text;
   id: nat16;
   lastName: text;
   leagueId: nat16;
   nationality: nat16;
   parentClubId: nat16;
   parentLeagueId: nat16;
   position: PlayerPosition;
   shirtNumber: nat8;
   status: PlayerStatus;
   valueQuarterMillions: nat16;
 };
type PlayBonus = 
 record {
   bonusType: BonusType;
   clubId: ClubId;
   countryId: CountryId;
   playerId: PlayerId;
   principalId: PrincipalId;
 };
type PayoutStatus = 
 variant {
   Paid;
   Pending;
 };
type NotifyAppofRemoveLink = 
 record {
   icfcPrincipalId: PrincipalId;
   subApp: SubApp;
 };
type NotifyAppofLink = 
 record {
   icfcPrincipalId: PrincipalId;
   membershipType: MembershipType;
   subApp: SubApp;
   subAppUserPrincipalId: PrincipalId;
 };
type MostValuableTeamLeaderboard = 
 record {
   entries: vec TeamValueLeaderboardEntry;
   seasonId: SeasonId;
   totalEntries: nat;
 };
type MostValuablePlayer = 
 record {
   fixtureId: FixtureId;
   playerId: PlayerId;
   points: nat16;
   rewardPerManager: nat64;
   selectedByCount: nat;
   totalRewardAmount: nat64;
 };
type MostValuableGameweekPlayers = 
 record {
   entries: vec MostValuablePlayer;
   gameweek: GameweekNumber;
   seasonId: SeasonId;
   totalEntries: nat;
 };
type MonthlyLeaderboard = 
 record {
   clubId: ClubId;
   entries: vec LeaderboardEntry__1;
   month: GameweekNumber;
   seasonId: SeasonId;
   totalEntries: nat;
 };
type MembershipType = 
 variant {
   Expired;
   Founding;
   Lifetime;
   Monthly;
   NotClaimed;
   NotEligible;
   Seasonal;
 };
type MembershipClaim = 
 record {
   expiresOn: opt int;
   membershipType: MembershipType;
   purchasedOn: int;
 };
type Manager = 
 record {
   createDate: int;
   favouriteClubId: opt ClubId;
   gameweeks: vec FantasyTeamSnapshot;
   monthlyPoints: int16;
   monthlyPosition: int;
   monthlyPositionText: text;
   principalId: PrincipalId;
   profilePicture: opt blob;
   profilePictureType: text;
   seasonPoints: int16;
   seasonPosition: int;
   seasonPositionText: text;
   username: text;
   weeklyPoints: int16;
   weeklyPosition: int;
   weeklyPositionText: text;
 };
type LeagueStatus = 
 record {
   activeGameweek: nat8;
   activeMonth: nat8;
   activeSeasonId: nat16;
   completedGameweek: nat8;
   leagueId: nat16;
   seasonActive: bool;
   totalGameweeks: nat8;
   transferWindowActive: bool;
   transferWindowEndDay: nat8;
   transferWindowEndMonth: nat8;
   transferWindowStartDay: nat8;
   transferWindowStartMonth: nat8;
   unplayedGameweek: nat8;
 };
type LeagueId = nat16;
type LeaderboardEntry__1 = 
 record {
   bonusPlayed: opt BonusType;
   membershipLevel: MembershipType;
   nationalityId: opt CountryId;
   points: int16;
   position: nat;
   positionText: text;
   principalId: PrincipalId;
   profilePicture: opt blob;
   rewardAmount: opt nat64;
   username: text;
 };
type LeaderboardEntry = 
 record {
   appPrincipalId: PrincipalId;
   payoutDate: opt int;
   payoutStatus: PayoutStatus;
   rewardAmount: opt nat64;
 };
type InjuryHistory = 
 record {
   description: text;
   expectedEndDate: int;
   injuryStartDate: int;
 };
type ICFCLinks = 
 record {
   icfcPrincipalId: PrincipalId;
   membershipType: MembershipType;
   subApp: SubApp;
   subAppUserPrincipalId: PrincipalId;
 };
type ICFCLinkStatus = 
 variant {
   PendingVerification;
   Verified;
 };
type ICFCLink = 
 record {
   dataHash: text;
   linkStatus: ICFCLinkStatus;
   membershipType: MembershipType;
   principalId: PrincipalId;
 };
type HighScoreRecord = 
 record {
   recordHolderPrincipalId: PrincipalId;
   recordHolderProfilePicture: opt blob;
   recordHolderUsername: text;
   recordPoints: nat16;
   recordPrizePool: nat64;
 };
type GetWeeklyLeaderboard = 
 record {
   gameweek: GameweekNumber;
   page: nat;
   searchTerm: text;
   seasonId: SeasonId;
 };
type GetSeasons = record {leagueId: nat16;};
type GetSeasonLeaderboard = 
 record {
   page: nat;
   seasonId: SeasonId;
 };
type GetPlayersSnapshot = 
 record {
   gameweek: GameweekNumber;
   seasonId: SeasonId;
 };
type GetPlayersMap = 
 record {
   gameweek: nat8;
   leagueId: nat16;
   seasonId: nat16;
 };
type GetPlayers = record {leagueId: nat16;};
type GetPlayerDetailsForGameweek = 
 record {
   gameweek: nat8;
   leagueId: nat16;
   seasonId: nat16;
 };
type GetPlayerDetails = 
 record {
   leagueId: nat16;
   playerId: nat16;
   seasonId: nat16;
 };
type GetMostValuableTeamLeaderboard = 
 record {
   page: nat;
   seasonId: SeasonId;
 };
type GetMostValuableGameweekPlayers = 
 record {
   gameweek: GameweekNumber;
   seasonId: SeasonId;
 };
type GetMonthlyLeaderboard = 
 record {
   clubId: ClubId;
   month: GameweekNumber;
   page: nat;
   seasonId: SeasonId;
 };
type GetManagerByUsername = record {username: text;};
type GetManager = record {principalId: text;};
type GetICFCLinks = record {};
type GetFixtures = 
 record {
   leagueId: nat16;
   seasonId: nat16;
 };
type GetFantasyTeamSnapshot = 
 record {
   gameweek: GameweekNumber;
   principalId: PrincipalId;
   seasonId: SeasonId;
 };
type GetClubs = record {leagueId: nat16;};
type GetAllTimeHighScores = record {};
type GameweekNumber = nat8;
type Fixtures = 
 record {
   fixtures: vec Fixture;
   leagueId: nat16;
   seasonId: nat16;
 };
type FixtureStatusType = 
 variant {
   Active;
   Complete;
   Finalised;
   Unplayed;
 };
type FixtureId = nat32;
type Fixture = 
 record {
   awayClubId: nat16;
   awayGoals: nat8;
   events: vec PlayerEventData__1;
   gameweek: nat8;
   highestScoringPlayerId: nat16;
   homeClubId: nat16;
   homeGoals: nat8;
   id: nat32;
   kickOff: int;
   seasonId: nat16;
   status: FixtureStatusType;
 };
type FantasyTeamSnapshot = 
 record {
   bankQuarterMillions: nat16;
   braceBonusGameweek: GameweekNumber;
   captainFantasticGameweek: GameweekNumber;
   captainFantasticPlayerId: PlayerId;
   captainId: PlayerId;
   favouriteClubId: opt ClubId;
   gameweek: GameweekNumber;
   goalGetterGameweek: GameweekNumber;
   goalGetterPlayerId: PlayerId;
   hatTrickHeroGameweek: GameweekNumber;
   month: CalendarMonth;
   monthlyBonusesAvailable: nat8;
   monthlyPoints: int16;
   noEntryGameweek: GameweekNumber;
   noEntryPlayerId: PlayerId;
   oneNationCountryId: CountryId;
   oneNationGameweek: GameweekNumber;
   passMasterGameweek: GameweekNumber;
   passMasterPlayerId: PlayerId;
   playerIds: vec PlayerId;
   points: int16;
   principalId: PrincipalId;
   prospectsGameweek: GameweekNumber;
   safeHandsGameweek: GameweekNumber;
   safeHandsPlayerId: PlayerId;
   seasonId: SeasonId;
   seasonPoints: int16;
   teamBoostClubId: ClubId;
   teamBoostGameweek: GameweekNumber;
   teamValueQuarterMillions: nat16;
   transferWindowGameweek: GameweekNumber;
   transfersAvailable: nat8;
   username: text;
 };
type Error = 
 variant {
   AlreadyClaimed;
   AlreadyExists;
   CanisterCreateError;
   DecodeError;
   DuplicateData;
   FailedInterCanisterCall;
   InEligible;
   IncorrectSetup;
   InsufficientFunds;
   InsufficientPacketsRemaining;
   InvalidData;
   InvalidProfilePicture;
   InvalidProperty;
   MaxDataExceeded;
   NeuronAlreadyUsed;
   NoPacketsRemaining;
   NotAllowed;
   NotAuthorized;
   NotFound;
   SystemOnHold;
   TooLong;
   UpdateFailed;
 };
type DetailedPlayer = 
 record {
   clubId: ClubId;
   dateOfBirth: int;
   firstName: text;
   gameweeks: vec PlayerGameweek;
   id: PlayerId;
   injuryHistory: vec InjuryHistory;
   lastName: text;
   latestInjuryEndDate: int;
   nationality: CountryId;
   parentClubId: ClubId;
   position: PlayerPosition__2;
   retirementDate: int;
   seasonId: SeasonId;
   shirtNumber: nat8;
   status: PlayerStatus__2;
   valueHistory: vec ValueHistory;
   valueQuarterMillions: nat16;
 };
type DataHash = 
 record {
   category: text;
   hash: text;
 };
type CountryId = nat16;
type Country = 
 record {
   code: text;
   id: CountryId;
   name: text;
 };
type Countries = record {countries: vec Country;};
type CompleteSeasonNotification = 
 record {
   leagueId: LeagueId;
   seasonId: SeasonId;
 };
type CompleteLeaderboardPayout = 
 record {
   gameweek: GameweekNumber;
   leaderboard: vec LeaderboardEntry;
   seasonId: SeasonId;
 };
type CompleteGameweekNotification = 
 record {
   gameweek: GameweekNumber;
   leagueId: LeagueId;
   seasonId: SeasonId;
 };
type CompleteFixtureNotification = 
 record {
   fixtureId: FixtureId;
   leagueId: LeagueId;
   seasonId: SeasonId;
 };
type CombinedProfile = 
 record {
   createDate: int;
   createdOn: int;
   displayName: text;
   favouriteClubId: opt ClubId;
   favouriteLeagueId: opt LeagueId;
   membershipClaims: vec MembershipClaim;
   membershipExpiryTime: int;
   membershipType: MembershipType;
   nationalityId: opt CountryId;
   principalId: PrincipalId;
   profilePicture: opt blob;
   profilePictureType: text;
   termsAccepted: bool;
   termsAgreed: bool;
   username: text;
 };
type Clubs = 
 record {
   clubs: vec Club;
   leagueId: nat16;
 };
type ClubId = nat16;
type Club = 
 record {
   abbreviatedName: text;
   friendlyName: text;
   id: nat16;
   name: text;
   primaryColourHex: text;
   secondaryColourHex: text;
   shirtType: ShirtType;
   thirdColourHex: text;
 };
type CanisterType = 
 variant {
   Dynamic;
   SNS;
   Static;
 };
type CanisterId = text;
type Canister = 
 record {
   app: WaterwayLabsApp;
   canisterId: CanisterId;
   canisterName: text;
   canisterType: CanisterType;
 };
type CalendarMonth = nat8;
type BonusType = 
 variant {
   BraceBonus;
   CaptainFantastic;
   GoalGetter;
   HatTrickHero;
   NoEntry;
   OneNation;
   PassMaster;
   Prospects;
   SafeHands;
   TeamBoost;
 };
type BeginGameweekNotification = 
 record {
   gameweek: GameweekNumber;
   leagueId: LeagueId;
   seasonId: SeasonId;
 };
type AppStatus = 
 record {
   onHold: bool;
   version: text;
 };
type AllTimeHighScores = 
 record {
   monthlyHighScore: opt HighScoreRecord;
   seasonHighScore: opt HighScoreRecord;
   weeklyHighScore: opt HighScoreRecord;
 };
type AddInitialFixtureNotification = record {leagueId: LeagueId;};
type AddController = 
 record {
   app: WaterwayLabsApp;
   canisterId: CanisterId;
   controller: PrincipalId;
 };
service : {
  addController: (AddController) -> (Result);
  addInitialFixtureNotification: (AddInitialFixtureNotification) -> (Result);
  beginGameweekNotification: (BeginGameweekNotification) -> (Result);
  changePlayerPositionNotification: (PlayerChangeNotification) -> (Result);
  completeGameweekNotification: (CompleteGameweekNotification) -> (Result);
  completeSeasonNotification: (CompleteSeasonNotification) -> (Result);
  expireLoanNotification: (PlayerChangeNotification) -> (Result);
  finaliseFixtureNotification: (CompleteFixtureNotification) -> (Result);
  getActiveLeaderboardCanisterId: () -> (Result_21);
  getActiveRewardRates: () -> (Result_29);
  getAllTimeHighScores: (GetAllTimeHighScores) -> (Result_28);
  getAllUserICFCLinks: () -> (vec record {
                                    PrincipalId;
                                    ICFCLink;
                                  });
  getAppStatus: () -> (Result_27);
  getClubs: (GetClubs) -> (Result_26);
  getCountries: () -> (Result_25);
  getDataHashes: () -> (Result_24);
  getFantasyTeamSnapshot: (GetFantasyTeamSnapshot) -> (Result_23);
  getFixtures: (GetFixtures) -> (Result_22);
  getICFCDataHash: () -> (Result_21);
  getICFCLinkStatus: () -> (Result_20);
  getICFCProfileLinks: (GetICFCLinks) -> (Result_19);
  getLeaderboardCanisterIds: () -> (Result_16);
  getLeagueStatus: () -> (Result_18);
  getManager: (GetManager) -> (Result_17);
  getManagerByUsername: (GetManagerByUsername) -> (Result_17);
  getManagerCanisterIds: () -> (Result_16);
  getMonthlyLeaderboard: (GetMonthlyLeaderboard) -> (Result_15);
  getMostValuableGameweekPlayers: (GetMostValuableGameweekPlayers) ->
   (Result_14);
  getMostValuableTeamLeaderboard: (GetMostValuableTeamLeaderboard) ->
   (Result_13);
  getPlayerDetails: (GetPlayerDetails) -> (Result_12);
  getPlayerEvents: (GetPlayerDetailsForGameweek) -> (Result_11);
  getPlayers: (GetPlayers) -> (Result_10);
  getPlayersMap: (GetPlayersMap) -> (Result_9);
  getPlayersSnapshot: (GetPlayersSnapshot) -> (Result_8);
  getProfile: () -> (Result_7);
  getProjectCanisters: () -> (Result_6);
  getSeasonLeaderboard: (GetSeasonLeaderboard) -> (Result_5);
  getSeasons: (GetSeasons) -> (Result_4);
  getTeamSelection: () -> (Result_3);
  getTotalManagers: () -> (Result_2);
  getWeeklyLeaderboard: (GetWeeklyLeaderboard) -> (Result_1);
  leaderboardPaid: (CompleteLeaderboardPayout) -> (Result);
  linkICFCProfile: () -> (Result);
  loanPlayerNotification: (PlayerChangeNotification) -> (Result);
  noitifyAppofICFCHashUpdate: (UpdateICFCProfile) -> (Result);
  notifyAppLink: (NotifyAppofLink) -> (Result);
  notifyAppRemoveLink: (NotifyAppofRemoveLink) -> (Result);
  recallPlayerNotification: (PlayerChangeNotification) -> (Result);
  removeController: (RemoveController) -> (Result);
  retirePlayerNotification: (PlayerChangeNotification) -> (Result);
  revaluePlayerDownNotification: (PlayerChangeNotification) -> (Result);
  revaluePlayerUpNotification: (PlayerChangeNotification) -> (Result);
  saveBonusSelection: (PlayBonus) -> (Result);
  saveTeamSelection: (SaveFantasyTeam) -> (Result);
  setFreeAgentNotification: (PlayerChangeNotification) -> (Result);
  transferPlayerNotification: (PlayerChangeNotification) -> (Result);
  updateFavouriteClub: (SetFavouriteClub) -> (Result);
}
